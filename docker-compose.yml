services:
        backend:
                build:
                        context: .
                        dockerfile: Dockerfile
                container_name: fastapi_server
                ports:
                        - "8000:8000"
                volumes:
                        - ./server:/app
                        - ./chroma_data:/app/chroma_data
                command: >
                        uvicorn main:app
                        --host 0.0.0.0
                        --port 8000
                        --reload
                env_file:
                        - .env
                depends_on:
                        - kafka
                        - db
                        - chroma
                networks:
                        - app_network

        zookeeper:
                image: confluentinc/cp-zookeeper:7.5.3
                container_name: zookeeper
                ports:
                        - "2181:2181"
                environment:
                        ZOOKEEPER_CLIENT_PORT: 2181
                        ZOOKEEPER_TICK_TIME: 2000
                volumes:
                        - zookeeper_data:/var/lib/zookeeper/data
                        - zookeeper_log:/var/lib/zookeeper/log
                networks:
                        - app_network

        kafka:
                image: confluentinc/cp-kafka:7.5.3
                container_name: kafka
                ports:
                        - "9092:9092"
                        - "9093:9093"
                depends_on:
                        - zookeeper
                environment:
                        KAFKA_BROKER_ID: 1
                        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                        KAFKA_LISTENERS: PLAINTEXT://:9092,BROKER://:9093
                        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,BROKER://kafka:9093
                        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,BROKER:PLAINTEXT
                        KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
                        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
                        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
                volumes:
                        - kafka_data:/var/lib/kafka/data
                networks:
                        - app_network

        kafka-ui:
                image: provectuslabs/kafka-ui:latest
                container_name: kafka_ui
                ports:
                        - "8080:8080"
                depends_on:
                        - kafka
                environment:
                        KAFKA_CLUSTERS_0_NAME: local-kafka
                        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
                        KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
                networks:
                        - app_network

        db:
                image: postgres:13-alpine
                container_name: postgres_db
                ports:
                        - "5432:5432"
                environment:
                        POSTGRES_DB: ${POSTGRES_DB:-fastapi_db}
                        POSTGRES_USER: ${POSTGRES_USER:-user}
                        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
                volumes:
                        - postgres_data:/var/lib/postgresql/data
                networks:
                        - app_network

        chroma:
                image: chromadb/chroma:latest
                container_name: chromadb_server
                ports:
                        - "8001:8000"
                volumes:
                        - chroma_volume:/chroma/chroma
                environment:
                        # CHROMA_SERVER_HOST: 0.0.0.0 # This is often default or not needed if container network is set up
                        # CHROMA_SERVER_PORT: 8000 # This is the default internal port
                        IS_PERSISTENT: "TRUE"
                networks:
                        - app_network

volumes:
        zookeeper_data:
        zookeeper_log:
        kafka_data:
        postgres_data:
        chroma_volume:

networks:
        app_network:
                driver: bridge